// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add_category": {
            "post": {
                "description": "Add a new category to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Categories"
                ],
                "summary": "Add a new category",
                "parameters": [
                    {
                        "description": "Category data",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Category"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/add_event": {
            "post": {
                "description": "Add a new event to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Events"
                ],
                "summary": "Add a new event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Event"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/add_user": {
            "post": {
                "description": "Add a new user to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Users"
                ],
                "summary": "Add a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/delete_category/{category_id}": {
            "delete": {
                "description": "Delete a category from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Categories"
                ],
                "summary": "Delete a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/delete_event/{event_id}": {
            "delete": {
                "description": "Delete an event from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Events"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/delete_user/{user_id}": {
            "delete": {
                "description": "Delete a user from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/get_categories": {
            "get": {
                "description": "Get a list of all categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Categories"
                ],
                "summary": "Get all categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Category"
                            }
                        }
                    }
                }
            }
        },
        "/get_events": {
            "get": {
                "description": "Get a list of all events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Events"
                ],
                "summary": "Get all events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Events",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Event"
                            }
                        }
                    }
                }
            }
        },
        "/get_users": {
            "get": {
                "description": "Get a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.User"
                            }
                        }
                    }
                }
            }
        },
        "/update_category/{category_id}": {
            "put": {
                "description": "Update an existing category in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Categories"
                ],
                "summary": "Update a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated category data",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Category"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/update_event/{event_id}": {
            "put": {
                "description": "Update an existing event in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Events"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Event"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/update_user/{user_id}": {
            "put": {
                "description": "Update an existing user in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "db.Category": {
            "type": "object",
            "required": [
                "category_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "category_name": {
                    "type": "string"
                }
            }
        },
        "db.Event": {
            "type": "object",
            "required": [
                "category",
                "end_date",
                "location",
                "start_date",
                "title"
            ],
            "properties": {
                "category": {
                    "type": "integer"
                },
                "end_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "db.User": {
            "type": "object",
            "required": [
                "email",
                "event_id",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "event_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth3rdParty": {
            "description": "Authorization token for third-party section (Ensure the token is in this format: Bearer token)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BearerAuthBackOffice": {
            "description": "Authorization token for back-office section (Ensure the token is in this format: Bearer token)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.00.",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Eventy",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
